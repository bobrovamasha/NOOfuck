import telebot
from telebot import types
import json
import os
import csv
from datetime import datetime
import requests
import time
import sqlite3
import logging

# ================== –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø ==================
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# ================== –°–û–ó–î–ê–ù–ò–ï –ë–û–¢–ê ==================
try:
    bot = telebot.TeleBot('8377973620:AAEcq9MEsqyOSYrCVwo3tTbLRy7x09YHSW4')
    bot_info = bot.get_me()
    print(f"‚úÖ –ë–æ—Ç {bot_info.first_name} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    exit(1)

# ================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==================
USERS_FILE = 'users.json'
GOOGLE_SHEETS_URL = "https://docs.google.com/spreadsheets/d/1qsffjxK5k8RZpAViVctPW8_hGmxVxGyrFbcGiBxeh18/edit#gid=0"
SUGGESTIONS_CHANNEL = '-1003025188845'
PASSWORD = "admin123"
CREDIT_CHANNEL = '-1003025188845'

user_states = {}

# ================== –î–ê–ù–ù–´–ï –ú–ê–ì–ê–ó–ò–ù–ê ==================
PRODUCTS = {
    "–ü–æ–¥–∞—Ä–æ–∫ –º–∞–ª—ã–π": {
        "name": "üéÅ –ü–æ–¥–∞—Ä–æ–∫ –≤ Telegram –º–∞–ª—ã–π",
        "description": "–õ—é–±–æ–π –ø–æ–¥–∞—Ä–æ–∫ –≤ Telegram –Ω–∞ –≤–∞—à –≤–∫—É—Å\n\n‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 100 ‚≠ê",
        "price": 250,
        "category": "üéÅ –ü–æ–¥–∞—Ä–∫–∏ –≤ Telegram"
    },
    "–ü–æ–¥–∞—Ä–æ–∫ –±–æ–ª—å—à–æ–π": {
        "name": "üéÅ –ü–æ–¥–∞—Ä–æ–∫ –≤ Telegram –±–æ–ª—å—à–æ–π",
        "description": "–õ—é–±–æ–π –ø–æ–¥–∞—Ä–æ–∫ –≤ Telegram –Ω–∞ –≤–∞—à –≤–∫—É—Å\n\n‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 100 ‚≠ê",
        "price": 320,
        "category": "üéÅ –ü–æ–¥–∞—Ä–∫–∏ –≤ Telegram"
    },
    "–£—Ä–æ–∫": {
        "name": "üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è",
        "description": "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —É—Ä–æ–∫ —Å –ù–∏–∫–∏—Ç–æ–π –ø–æ –ª—é–±—ã–º —Ç–µ–º–∞–º, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä—É–¥–Ω–æ –¥–∞—é—Ç—Å—è\n\n‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 1,5-2 —á–∞—Å–∞\n‚Ä¢ –§–æ—Ä–º–∞—Ç: –æ–Ω–ª–∞–π–Ω\n‚Ä¢ –ó–∞–ø–∏—Å—å: –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è",
        "price": 200,
        "category": "üë• –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ"
    },
    "–ü–æ–¥–ø–∏—Å–∫–∞": {
        "name": "üíé Telegram-–ü—Ä–µ–º–∏—É–º",
        "description": "–ü–æ–¥–∞—Ä–æ—á–Ω–∞—è –ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞\n\n‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 3 –º–µ—Å—è—Ü–∞",
        "price": 600,
        "category": "üéÅ –ü–æ–¥–∞—Ä–∫–∏ –≤ Telegram"
    },
    "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç 500 —Ä—É–±": {
        "name": "üé´ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç ‚Ññ1",
        "description": "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–∫—É–ø–∫—É –Ω–∞ –º–∞—Ä–∫–µ—Ç-–ø–ª–µ–π—Å–∞—Ö\n\n‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: 500 —Ä—É–±–ª–µ–π\n‚Ä¢ –û–∑–æ–Ω/ –ó–æ–ª–æ—Ç–æ–µ —è–±–ª–æ–∫–æ/ –õ'–≠—Ç—É–∞–ª—å\n‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –±–µ—Å—Å—Ä–æ—á–Ω—ã–µ",
        "price": 360,
        "category": "üìú –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã"
    },
    "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç 1000 —Ä—É–±": {
        "name": "üé´ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç ‚Ññ2",
        "description": "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–∫—É–ø–∫—É –Ω–∞ –º–∞—Ä–∫–µ—Ç-–ø–ª–µ–π—Å–∞—Ö\n\n‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: 1000 —Ä—É–±–ª–µ–π\n‚Ä¢ –û–∑–æ–Ω/ –ó–æ–ª–æ—Ç–æ–µ —è–±–ª–æ–∫–æ/ –õ'–≠—Ç—É–∞–ª—å\n‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –±–µ—Å—Å—Ä–æ—á–Ω—ã–µ",
        "price": 550,
        "category": "üìú –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã"
    },
    "–°–ª–∞–¥–æ—Å—Ç–∏": {
        "name": "üç¨ –°–ª–∞–¥–æ—Å—Ç–∏",
        "description": "–í–∫—É—Å–Ω—è—à–∫–∏ –Ω–∞ –≤–∞—à –≤–∫—É—Å, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –∫—É—Ä—å–µ—Ä—Å–∫–æ–π –¥–æ—Å—Ç–∞–≤–∫–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –°–∞–º–æ–∫–∞—Ç)\n\n‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: 500 —Ä—É–±–ª–µ–π",
        "price": 340,
        "category": "üë• –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ"
    },
    "–°—Ö–æ–¥–∫–∞": {
        "name": "ü•≥ –°—Ö–æ–¥–∫–∞",
        "description": "–ï—Å–ª–∏ –≤—ã –∏–¥–µ—Ç–µ –Ω–∞ —Å—Ö–æ–¥–∫—É - –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–æ–π –≤–º–µ—Å—Ç–æ –æ–ø–ª–∞—Ç—ã –∫–≤–µ—Å—Ç–∞\n\n‚Ä¢ –ö–≤–µ—Å—Ç –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –∑–∞ –≤–∞—Å\n‚Ä¢ –í –¥–∞–Ω–Ω–æ–π –æ–ø—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω –ø–µ—Ä–µ–∫—É—Å –¥–æ 500 —Ä—É–±–ª–µ–π –ø–æ—Å–ª–µ –∫–≤–µ—Å—Ç–∞ (–ø–æ —Ç—Ä–∞–¥–∏—Ü–∏–∏)",
        "price": 790,
        "category": "üë• –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ"
    },
    "–ú–µ—Ä—á": {
        "name": "üî• –ú–µ—Ä—á –Ω–æ–æfuck'–∞",
        "description": "–≠–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–æ–æfuck'–∞\n\n‚Ä¢ –í–µ—Ä—Å–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É\n‚Ä¢ –£—Ç–æ—á–Ω—è–π—Ç–µ –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π",
        "price": 300,
        "category": "üë• –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ"}
}
# ================= –ë–ê–ó–ê –î–ê–ù–ù–´–• –ë–ê–õ–ê–ù–°–û–í ==================
import sqlite3

BALANCE_DB = 'user_balances.db'


def init_balance_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–∞–ª–∞–Ω—Å–æ–≤"""
    try:
        conn = sqlite3.connect(BALANCE_DB)
        cursor = conn.cursor()

        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id TEXT PRIMARY KEY,
                balance INTEGER DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        cursor.execute('''
            CREATE TABLE IF NOT EXISTS transactions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id TEXT,
                amount INTEGER,
                type TEXT,
                description TEXT,
                product_id TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')

        conn.commit()
        conn.close()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")


init_balance_db()


# ================== –§–£–ù–ö–¶–ò–ò –ë–ê–ó–´ –î–ê–ù–ù–´–• ==================
def get_user_balance(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î"""
    try:
        conn = sqlite3.connect(BALANCE_DB)
        cursor = conn.cursor()

        cursor.execute('SELECT balance FROM users WHERE user_id = ?', (str(user_id),))
        result = cursor.fetchone()

        conn.close()

        if result:
            return result[0]
        else:
            return create_user_in_db(user_id)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
        return 0


def create_user_in_db(user_id):
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã"""
    try:
        initial_balance = calculate_balance_from_google(user_id)

        conn = sqlite3.connect(BALANCE_DB)
        cursor = conn.cursor()

        cursor.execute(
            'INSERT INTO users (user_id, balance) VALUES (?, ?)',
            (str(user_id), initial_balance)
        )

        cursor.execute(
            'INSERT INTO transactions (user_id, amount, type, description) VALUES (?, ?, ?, ?)',
            (str(user_id), initial_balance, 'initial', '–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã')
        )

        conn.commit()
        conn.close()

        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å –±–∞–ª–∞–Ω—Å–æ–º {initial_balance}")
        return initial_balance

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: {e}")
        return 0


def update_user_balance(user_id, amount, description, product_id=None):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î"""
    try:
        conn = sqlite3.connect(BALANCE_DB)
        cursor = conn.cursor()

        cursor.execute('SELECT balance FROM users WHERE user_id = ?', (str(user_id),))
        result = cursor.fetchone()

        if not result:
            create_user_in_db(user_id)
            cursor.execute('SELECT balance FROM users WHERE user_id = ?', (str(user_id),))
            result = cursor.fetchone()

        current_balance = result[0]
        new_balance = current_balance + amount

        cursor.execute(
            'UPDATE users SET balance = ?, updated_at = CURRENT_TIMESTAMP WHERE user_id = ?',
            (new_balance, str(user_id))
        )

        transaction_type = 'purchase' if amount < 0 else 'credit' if amount > 0 else 'other'
        cursor.execute(
            'INSERT INTO transactions (user_id, amount, type, description, product_id) VALUES (?, ?, ?, ?, ?)',
            (str(user_id), amount, transaction_type, description, product_id)
        )

        conn.commit()
        conn.close()

        print(f"‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {user_id} {amount:+} = {new_balance} ({description})")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
        return False


def get_user_transactions(user_id, limit=10):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn = sqlite3.connect(BALANCE_DB)
        cursor = conn.cursor()

        cursor.execute('''
            SELECT amount, type, description, created_at 
            FROM transactions 
            WHERE user_id = ? 
            ORDER BY created_at DESC 
            LIMIT ?
        ''', (str(user_id), limit))

        transactions = cursor.fetchall()
        conn.close()

        return transactions

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {e}")
        return []


# ================== –§–£–ù–ö–¶–ò–ò GOOGLE –¢–ê–ë–õ–ò–¶ ==================
def load_google_sheets_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets"""
    try:
        sheet_id = GOOGLE_SHEETS_URL.split('/d/')[1].split('/')[0]
        csv_url = f"https://docs.google.com/spreadsheets/d/{sheet_id}/export?format=csv&gid=0"

        print(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑: {csv_url}")
        response = requests.get(csv_url, timeout=30)

        if response.status_code == 200:
            response.encoding = 'utf-8'
            csv_data = response.text

            if '    ' in csv_data or '√ê' in csv_data:
                response.encoding = 'cp1251'
                csv_data = response.text

            lines = csv_data.strip().split('\n')
            print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(lines)}")

            users_data = {}
            headers = []

            for i, line in enumerate(lines):
                cells = []
                current_cell = ""
                in_quotes = False

                for char in line:
                    if char == '"':
                        in_quotes = not in_quotes
                    elif char == ',' and not in_quotes:
                        cells.append(current_cell.strip())
                        current_cell = ""
                    else:
                        current_cell += char

                if current_cell:
                    cells.append(current_cell.strip())

                cells = [cell.strip('"') for cell in cells]

                if i == 0:
                    headers = cells
                    continue

                if not any(cells) or len(cells) < 4:
                    continue

                user_id = cells[1] if len(cells) > 1 else None

                if user_id and user_id.isdigit():
                    user_name = cells[2] if len(cells) > 2 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                    credit_column_index = 3
                    if len(cells) > credit_column_index:
                        credit_value = cells[credit_column_index]
                        try:
                            credit_amount = float(credit_value) if credit_value.strip() else 0
                        except ValueError:
                            credit_amount = 0
                    else:
                        credit_amount = 0

                    scores = {}
                    total_score = 0
                    count_3_4 = 0
                    penalty_applied = 0

                    for j in range(5, len(cells)):
                        if j < len(headers) and j < len(cells):
                            column_name = headers[j] if j < len(headers) else f"Column_{j}"
                            cell_value = cells[j]

                            if cell_value and cell_value.strip():
                                try:
                                    numeric_value = int(cell_value)
                                    points = 0

                                    if numeric_value == 1:
                                        points = 10
                                    elif numeric_value == 2:
                                        points = 5
                                    elif numeric_value in [3, 4]:
                                        points = 0
                                        count_3_4 += 1
                                        if count_3_4 > 2:
                                            points = -20
                                            penalty_applied += 1
                                    elif numeric_value == 5:
                                        points = 15
                                    elif numeric_value == 6:
                                        points = 8
                                    elif numeric_value == 7:
                                        points = 20
                                    elif numeric_value == 8:
                                        points = -20
                                    elif numeric_value in [9, 10]:
                                        points = 15
                                    elif numeric_value == 11:
                                        points = 8
                                    elif numeric_value == 12:
                                        points = 30
                                    elif numeric_value == 13:
                                        points = -30
                                    elif numeric_value == 14:
                                        points = -15
                                    elif numeric_value == 15:
                                        points = -10
                                    elif numeric_value == 16:
                                        points = -15
                                    elif numeric_value in [17, 18]:
                                        points = -20
                                    elif numeric_value == 19:
                                        points = 15
                                    elif numeric_value == 20:
                                        points = -10
                                    elif numeric_value == 21:
                                        points = 25
                                    elif numeric_value == 22:
                                        points = -25
                                    elif numeric_value == 23:
                                        points = 5
                                    elif numeric_value == 24:
                                        points = 3
                                    else:
                                        points = 0

                                    scores[column_name] = {
                                        'value': numeric_value,
                                        'points': points
                                    }
                                    total_score += points

                                except ValueError:
                                    scores[column_name] = {
                                        'value': cell_value,
                                        'points': 0,
                                        'description': f'–¢–µ–∫—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {cell_value}'
                                    }

                    if penalty_applied > 0:
                        scores['penalty_info'] = {
                            'value': f'–®—Ç—Ä–∞—Ñ—ã –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –î–î',
                            'points': -20 * penalty_applied,
                            'description': f'–®—Ç—Ä–∞—Ñ -20 –±–∞–ª–ª–æ–≤ –∑–∞ {penalty_applied} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –î–î –ø–æ—Å–ª–µ –ª–∏–º–∏—Ç–∞'
                        }

                    users_data[user_id] = {
                        'name': user_name,
                        'scores': scores,
                        'total_score': total_score,
                        'count_3_4': count_3_4,
                        'penalty_applied': penalty_applied,
                        'credit': credit_amount,
                        'raw_data': cells
                    }

            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_data)}")
            return users_data

        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: HTTP {response.status_code}")
            return {}

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Google Sheets: {e}")
        return {}


def get_user_history(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    users_data = load_google_sheets_data()
    user_id_str = str(user_id)

    if user_id_str in users_data:
        user_data = users_data[user_id_str]
        history = []

        for task_name, score_info in user_data['scores'].items():
            if task_name == 'penalty_info':
                history.append({
                    'task': '–®—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –î–î',
                    'score': score_info['points'],
                    'date': '2024-2025',
                    'description': score_info['description']
                })
            elif isinstance(score_info, dict) and 'points' in score_info:
                history.append({
                    'task': task_name,
                    'score': score_info['points'],
                    'date': '2024-2025',
                    'description': score_info['description'],
                    'original_value': score_info['value']
                })

        history.sort(key=lambda x: x['score'], reverse=True)
        return history
    else:
        return []


def calculate_balance_from_google(user_id):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã"""
    try:
        users_data = load_google_sheets_data()
        user_id_str = str(user_id)

        if user_id_str in users_data:
            return users_data[user_id_str]['total_score']
        else:
            return 0
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –±–∞–ª–∞–Ω—Å–∞ –∏–∑ Google: {e}")
        return 0


def get_user_credit(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    users_data = load_google_sheets_data()
    user_data = users_data.get(str(user_id), {})
    return user_data.get('credit', 0)


def get_total_available_balance(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å (–±–∞–ª–ª—ã + –∫—Ä–µ–¥–∏—Ç)"""
    balance = get_user_balance(user_id)
    credit = get_user_credit(user_id)
    return balance + credit


# ================== –ë–ê–ó–û–í–´–ï –§–£–ù–ö–¶–ò–ò ==================
def load_users():
    if os.path.exists(USERS_FILE):
        try:
            with open(USERS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            return {}
    return {}


def save_users(users_dict):
    try:
        with open(USERS_FILE, 'w', encoding='utf-8') as f:
            json.dump(users_dict, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")


def send_suggestion_to_channel(user_info, suggestion_text):
    try:
        message_text = f"üí° –ù–û–í–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï\n\nüë§ –û—Ç: {user_info['first_name']}\nüÜî ID: {user_info['user_id']}\n"
        if user_info.get('username'):
            message_text += f"üì± Username: @{user_info['username']}\n"
        message_text += f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\nüìù –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:\n{suggestion_text}"

        bot.send_message(SUGGESTIONS_CHANNEL, message_text)
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª: {e}")
        return False


# ================== –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• ==================
print("üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
users = load_users()
print("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")


# ================== –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==================
@bot.message_handler(commands=['start'])
def start(message):
    user_id = str(message.from_user.id)
    first_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    if user_id not in users:
        users[user_id] = {
            'first_name': first_name,
            'username': message.from_user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω",
            'is_new': True,
            'visit_count': 1,
            'registered_at': datetime.now().isoformat()
        }
    else:
        users[user_id]['visit_count'] += 1
        users[user_id]['is_new'] = False

    save_users(users)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        "üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üìä –ò—Å—Ç–æ—Ä–∏—è –∑–∞—á–∏—Å–ª–µ–Ω–∏–π", "üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
        "‚≠ê –û—Ç–∑—ã–≤—ã", "üìã –ü—Ä–∞–≤–∏–ª–∞", "‚ö° –®—Ç—Ä–∞—Ñ—ã", "üõí –ü–æ–∫—É–ø–∫–∏",
        "üìã –°–ø–∏—Å–æ–∫ ID", "üí∞ –ö—Ä–µ–¥–∏—Ç", "üéØ –í–∏–∫—Ç–æ—Ä–∏–Ω—ã"  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–∏–∫—Ç–æ—Ä–∏–Ω
    ]
    for btn_text in buttons:
        markup.add(types.KeyboardButton(btn_text))

    bot.send_message(user_id, f"üëã –ü—Ä–∏–≤–µ—Ç, {first_name}!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=markup)


@bot.message_handler(content_types=['text'])
def handle_messages(message):
    user_id = str(message.from_user.id)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π (–î–û–õ–ñ–ù–û –ë–´–¢–¨ –ü–ï–†–í–´–ú!)
    if user_id in user_states:
        if user_states[user_id] == 'waiting_suggestion':
            handle_suggestion(message)
            return
        elif user_states[user_id] == 'waiting_password':
            handle_password(message)
            return
        elif user_states[user_id] == 'waiting_credit_amount':
            handle_credit_amount(message)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –∫—Ä–µ–¥–∏—Ç–∞
            return
        elif user_states[user_id] == 'shopping':
            handle_shop_selection(message)
            return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω
    if user_id in user_quiz_progress:
        handle_quiz_selection(message)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞
    for quiz_id, quiz_data in QUIZZES.items():
        if message.text == quiz_data["name"] or message.text == f"‚úÖ {quiz_data['name']} (–ü—Ä–æ–π–¥–µ–Ω–∞)":
            handle_quiz_selection(message)
            return

    # –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–ö–ò "üìù –í–ó–Ø–¢–¨ –ö–†–ï–î–ò–¢" (–¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏)
    if message.text == "üìù –í–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç":
        show_credit_menu(message)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞
    if "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞" in message.text and "‚Ññ" in message.text:
        quiz_found = False
        for quiz_id, quiz_data in QUIZZES.items():
            if message.text == quiz_data["name"]:
                quiz_found = True
                break

        if not quiz_found:
            bot.send_message(user_id, "‚ùå –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ–∫–∞ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            show_quizzes_menu(message)
            return

    if message.text in ["üöÄ –ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", "üîô –ü—Ä–µ—Ä–≤–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É"]:
        handle_quiz_selection(message)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    handlers = {
        "üë§ –ü—Ä–æ—Ñ–∏–ª—å": show_profile,
        "üìä –ò—Å—Ç–æ—Ä–∏—è –∑–∞—á–∏—Å–ª–µ–Ω–∏–π": show_history,
        "üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è": show_suggestions_menu,
        "‚≠ê –û—Ç–∑—ã–≤—ã": show_reviews,
        "üìã –ü—Ä–∞–≤–∏–ª–∞": show_rules,
        "‚ö° –®—Ç—Ä–∞—Ñ—ã": show_penalties,
        "üõí –ü–æ–∫—É–ø–∫–∏": lambda msg: enter_shop(msg),
        "üìã –°–ø–∏—Å–æ–∫ ID": show_password_prompt,
        "üí∞ –ö—Ä–µ–¥–∏—Ç": show_credit_menu,
        "üéØ –í–∏–∫—Ç–æ—Ä–∏–Ω—ã": show_quizzes_menu,
        "üîô –ù–∞–∑–∞–¥": start,
        "üîô –í –º–µ–Ω—é": start,
        "üîô –í –º–∞–≥–∞–∑–∏–Ω": show_purchases,
        "üîô –ù–∞–∑–∞–¥ –∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞–º": show_quizzes_menu
    }

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤
    categories = set(product["category"] for product in PRODUCTS.values())
    if message.text in categories:
        handle_shop_selection(message)
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤
    for product_id, product in PRODUCTS.items():
        if message.text == product["name"]:
            handle_shop_selection(message)
            return

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ–ø–ª–∞—Ç—ã
    if message.text.startswith("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å"):
        handle_shop_selection(message)
        return

    if message.text in handlers:
        handlers[message.text](message)


def save_completed_quizzes():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞—Ö –≤ —Ñ–∞–π–ª"""
    try:
        with open('completed_quizzes.json', 'w', encoding='utf-8') as f:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è JSON
            serializable_data = {}
            for user_id, quizzes in user_completed_quizzes.items():
                serializable_data[user_id] = {}
                for quiz_id, data in quizzes.items():
                    serializable_data[user_id][quiz_id] = {
                        'score': data['score'],
                        'total_questions': data['total_questions'],
                        'completion_time': data['completion_time'].isoformat(),
                        'answers': data['answers']
                    }
            json.dump(serializable_data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω: {e}")


def load_completed_quizzes():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞—Ö –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists('completed_quizzes.json'):
            with open('completed_quizzes.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º datetime –∏–∑ —Å—Ç—Ä–æ–∫–∏
                for user_id, quizzes in data.items():
                    user_completed_quizzes[user_id] = {}
                    for quiz_id, quiz_data in quizzes.items():
                        user_completed_quizzes[user_id][quiz_id] = {
                            'score': quiz_data['score'],
                            'total_questions': quiz_data['total_questions'],
                            'completion_time': datetime.fromisoformat(quiz_data['completion_time']),
                            'answers': quiz_data['answers']
                        }
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞—Ö –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω: {e}")


# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
load_completed_quizzes()


# ================== –§–£–ù–ö–¶–ò–ò –ü–†–û–§–ò–õ–Ø –ò –ò–°–¢–û–†–ò–ò ==================
def show_profile(message):
    user_id = str(message.from_user.id)
    balance = get_user_balance(user_id)
    credit = get_user_credit(user_id)
    total_available = balance + credit
    transactions = get_user_transactions(user_id, 5)

    users_data = load_google_sheets_data()
    user_data = users_data.get(user_id, {})

    profile_text = f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n"
    profile_text += f"üÜî ID: {user_id}\n"
    profile_text += f"üë§ –ò–º—è: {message.from_user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
    profile_text += f"üì± Username: @{message.from_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
    profile_text += f"üíº –í–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞:\n"
    profile_text += f"   üí∞ –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∞–ª–ª—ã: {balance}\n"
    profile_text += f"   üè¶ –ö—Ä–µ–¥–∏—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞: {credit}\n"
    profile_text += f"   üí≥ –í—Å–µ–≥–æ: {total_available} –±–∞–ª–ª–æ–≤\n"

    if user_data:
        count_3_4 = user_data.get('count_3_4', 0)
        penalty_applied = user_data.get('penalty_applied', 0)

        profile_text += f"‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –î–î: {count_3_4}\n"
        if penalty_applied > 0:
            profile_text += f"üö´ –®—Ç—Ä–∞—Ñ–æ–≤ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ: {penalty_applied}\n"
        profile_text += "\n"

    if transactions:
        profile_text += "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:\n"
        for amount, t_type, description, date in transactions:
            sign = "‚ûï" if amount > 0 else "‚ûñ"
            date_str = datetime.strptime(date, '%Y-%m-%d %H:%M:%S').strftime('%d.%m')
            profile_text += f"{sign} {abs(amount)} - {description} ({date_str})\n"
    else:
        profile_text += "üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç–∞\n"

    bot.send_message(user_id, profile_text)


def show_history(message):
    user_id = str(message.from_user.id)

    bot.send_message(user_id, "üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ Google Sheets...")

    history = get_user_history(user_id)

    if history:
        history_text = f"üìä –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π\n\n"
        history_text += f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(history)}\n"
        history_text += f"–û–±—â–∏–π –±–∞–ª–ª: {calculate_balance_from_google(user_id)}\n\n"

        for i, record in enumerate(history, 1):
            task = record.get('task', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ')
            score = record.get('score', 0)
            description = record.get('description', '')
            original_value = record.get('original_value', '')

            if score > 0:
                emoji = "üü¢"
            elif score < 0:
                emoji = "üî¥"
            else:
                emoji = "‚ö™"

            history_text += f"{i}. {emoji} {task}\n"
            history_text += f"   ‚≠ê –ë–∞–ª–ª—ã: {score:+.0f}\n"

            if description:
                history_text += f"   üìù {description}\n"

            history_text += "\n"

    else:
        history_text = "üìä –ò—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π\n\n"
        history_text += "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n"
        history_text += f"üÜî –í–∞—à ID: {user_id}\n"
        history_text += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üìã –°–ø–∏—Å–æ–∫ ID' —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ ID"

    if len(history_text) > 4000:
        parts = [history_text[i:i + 4000] for i in range(0, len(history_text), 4000)]
        for part in parts:
            bot.send_message(user_id, part)
            time.sleep(0.5)
    else:
        bot.send_message(user_id, history_text)


# ================== –°–ò–°–¢–ï–ú–ê –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ô ==================
def show_suggestions_menu(message):
    user_id = str(message.from_user.id)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    user_states[user_id] = 'waiting_suggestion'
    bot.send_message(user_id, "üí° –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:", reply_markup=markup)


def handle_suggestion(message):
    user_id = str(message.from_user.id)
    suggestion_text = message.text

    if suggestion_text == "üîô –ù–∞–∑–∞–¥":
        user_states[user_id] = None
        start(message)
        return

    if len(suggestion_text.strip()) < 10:
        bot.send_message(user_id, "‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ.")
        return

    user_info = {
        'user_id': user_id,
        'first_name': message.from_user.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        'username': message.from_user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω"
    }

    if send_suggestion_to_channel(user_info, suggestion_text):
        bot.send_message(user_id, "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    else:
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏.")

    user_states[user_id] = None
    start(message)


# ================== –°–ò–°–¢–ï–ú–ê –ö–†–ï–î–ò–¢–û–í ==================
def show_credit_menu(message):
    """–ú–µ–Ω—é –∫—Ä–µ–¥–∏—Ç–∞"""
    user_id = str(message.from_user.id)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "üìù –í–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç" –∏–∑ –º–µ–Ω—é –∫—Ä–µ–¥–∏—Ç–∞
    if message.text == "üìù –í–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç":
        user_states[user_id] = 'waiting_credit_amount'
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
        bot.send_message(user_id, "üí≥ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞ (–º–∞–∫—Å–∏–º—É–º 250 –±–∞–ª–ª–æ–≤):", reply_markup=markup)
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "üîô –ù–∞–∑–∞–¥" –∏–∑ –º–µ–Ω—é –∫—Ä–µ–¥–∏—Ç–∞
    if message.text == "üîô –ù–∞–∑–∞–¥":
        user_states[user_id] = None
        start(message)
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∫—Ä–µ–¥–∏—Ç–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –≤—Ö–æ–¥
    credit_info = """üí∞ –°–ò–°–¢–ï–ú–ê –ö–†–ï–î–ò–¢–û–í üí∞

–£—Å–ª–æ–≤–∏—è –∫—Ä–µ–¥–∏—Ç–∞:
‚Ä¢ üè¶ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 250 –±–∞–ª–ª–æ–≤
‚Ä¢ üìà –ü—Ä–æ—Ü–µ–Ω—Ç—ã: 14% –∫–∞–∂–¥—ã–µ 504 —á–∞—Å–∞ (21 –¥–µ–Ω—å)
‚Ä¢ üí∏ –ü–ª–∞—Ç–µ–∂: 1/12 –æ—Ç —Å—É–º–º—ã –∫–∞–∂–¥—ã–µ 168 —á–∞—Å–æ–≤ (7 –¥–Ω–µ–π)
‚Ä¢ ‚è±Ô∏è –ü–æ–ª–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ: 12 –Ω–µ–¥–µ–ª—å

–ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞:
–ö—Ä–µ–¥–∏—Ç 120 –±–∞–ª–ª–æ–≤:
‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂: 10 –±–∞–ª–ª–æ–≤
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç—ã –∫–∞–∂–¥—ã–µ 3 –Ω–µ–¥–µ–ª–∏: 16.8 –±–∞–ª–ª–æ–≤

‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ö—Ä–µ–¥–∏—Ç —Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!"""

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üìù –í–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç"))
    markup.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))

    bot.send_message(user_id, credit_info, reply_markup=markup)


def handle_credit_amount(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –∫—Ä–µ–¥–∏—Ç–∞"""
    user_id = str(message.from_user.id)

    if message.text == "üîô –ù–∞–∑–∞–¥":
        user_states[user_id] = None
        show_credit_menu(message)
        return

    try:
        amount = int(message.text)

        if amount <= 0:
            bot.send_message(user_id, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
            return

        if amount > 250:
            bot.send_message(user_id, "‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞ - 250 –±–∞–ª–ª–æ–≤!")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –∫–∞–Ω–∞–ª
        if send_credit_application(user_id, amount, message.from_user):
            user_states[user_id] = None
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton("üîô –í –º–µ–Ω—é"))
            bot.send_message(user_id,
                             f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –∫—Ä–µ–¥–∏—Ç {amount} –±–∞–ª–ª–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!\n\n–û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è.",
                             reply_markup=markup)
        else:
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    except ValueError:
        bot.send_message(user_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    except Exception as e:
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏")
        print(f"Credit error: {e}")


def send_credit_application(user_id, amount, user):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ –∫—Ä–µ–¥–∏—Ç –≤ –∫–∞–Ω–∞–ª"""
    try:
        message_text = f"""üè¶ –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –ö–†–ï–î–ò–¢ üè¶

üë§ –ö–ª–∏–µ–Ω—Ç: {user.first_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üÜî ID: {user_id}
üì± Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üí≥ –°—É–º–º–∞: {amount} –±–∞–ª–ª–æ–≤
üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}

–£—Å–ª–æ–≤–∏—è:
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç—ã: 14% –∫–∞–∂–¥—ã–µ 504 —á–∞—Å–∞
‚Ä¢ –ü–ª–∞—Ç–µ–∂–∏: 1/12 —Å—É–º–º—ã –∫–∞–∂–¥—ã–µ 168 —á–∞—Å–æ–≤
‚Ä¢ –°—Ä–æ–∫: 12 –Ω–µ–¥–µ–ª—å

‚ö†Ô∏è –î–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è: 
–í–Ω–µ—Å–∏—Ç–µ –∑–∞–ø–∏—Å—å –≤ –∫–æ–ª–æ–Ω–∫—É '–ö—Ä–µ–¥–∏—Ç—ã' –≤ —Ç–∞–±–ª–∏—Ü–µ"""

        bot.send_message(CREDIT_CHANNEL, message_text)
        print(f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –∫—Ä–µ–¥–∏—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –∫—Ä–µ–¥–∏—Ç: {e}")
        return False


# ================== –°–ò–°–¢–ï–ú–ê –ú–ê–ì–ê–ó–ò–ù–ê ==================
def enter_shop(message):
    user_id = str(message.from_user.id)
    user_states[user_id] = 'shopping'
    show_purchases(message)


def show_purchases(message):
    user_id = str(message.from_user.id)
    balance = get_user_balance(user_id)
    credit = get_user_credit(user_id)
    total_available = balance + credit

    shop_text = f"""üõí –ú–ê–ì–ê–ó–ò–ù –ë–ê–õ–õ–û–í

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±–º–µ–Ω—è—Ç—å –±–∞–ª–ª—ã –Ω–∞ –ø–æ–ª–µ–∑–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ —É—Å–ª—É–≥–∏!

üíº –í–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞:
üí∞ –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∞–ª–ª—ã: {balance}
üè¶ –ö—Ä–µ–¥–∏—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞: {credit}
üí≥ –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {total_available} –±–∞–ª–ª–æ–≤

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"""

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

    categories = set(product["category"] for product in PRODUCTS.values())
    for category in categories:
        markup.add(types.KeyboardButton(category))

    markup.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))

    bot.send_message(user_id, shop_text, reply_markup=markup)


def handle_shop_selection(message):
    user_id = str(message.from_user.id)

    if message.text == "üîô –ù–∞–∑–∞–¥":
        user_states[user_id] = None
        start(message)
        return

    categories = set(product["category"] for product in PRODUCTS.values())
    if message.text in categories:
        show_products_in_category(message, message.text)
        return

    for product_id, product in PRODUCTS.items():
        if message.text == product["name"]:
            show_product_details(message, product_id)
            return

    if message.text.startswith("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å"):
        product_id = message.text.replace("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å ", "")
        process_payment(message, product_id)
        return

    show_purchases(message)


def show_products_in_category(message, category):
    user_id = str(message.from_user.id)

    category_products = {pid: prod for pid, prod in PRODUCTS.items() if prod["category"] == category}

    products_text = f"{category}\n\n"

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)

    for product_id, product in category_products.items():
        products_text += f"{product['name']} - {product['price']} –±–∞–ª–ª–æ–≤\n"
        markup.add(types.KeyboardButton(product['name']))

    markup.add(types.KeyboardButton("üîô –í –º–∞–≥–∞–∑–∏–Ω"))

    bot.send_message(user_id, products_text, reply_markup=markup)


def show_product_details(message, product_id):
    user_id = str(message.from_user.id)
    product = PRODUCTS[product_id]
    balance = get_user_balance(user_id)
    credit = get_user_credit(user_id)
    total_available = balance + credit

    product_text = f"""üéÅ {product['name']}

{product['description']}

üí∞ –¶–µ–Ω–∞: {product['price']} –±–∞–ª–ª–æ–≤

üíº –í–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞:
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∞–ª–ª—ã: {balance}
‚Ä¢ –ö—Ä–µ–¥–∏—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞: {credit}
‚Ä¢ –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {total_available}"""

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    if total_available >= product['price']:
        amount_from_balance = min(balance, product['price'])
        amount_from_credit = product['price'] - amount_from_balance

        product_text += f"\n\n‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏!"
        product_text += f"\nüí∏ –ë—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ:"

        if amount_from_balance > 0:
            product_text += f"\n   ‚Ä¢ {amount_from_balance} –∏–∑ –≤–∞—à–∏—Ö –±–∞–ª–ª–æ–≤"
        if amount_from_credit > 0:
            product_text += f"\n   ‚Ä¢ {amount_from_credit} –∏–∑ –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤"

        markup.add(types.KeyboardButton(f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {product_id}"))
    else:
        product_text += f"\n\n‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {product['price'] - total_available} –±–∞–ª–ª–æ–≤"

    markup.add(types.KeyboardButton("üîô –í –º–∞–≥–∞–∑–∏–Ω"))

    bot.send_message(user_id, product_text, reply_markup=markup)


def process_payment(message, product_id):
    user_id = str(message.from_user.id)
    product = PRODUCTS[product_id]

    total_available = get_total_available_balance(user_id)
    balance = get_user_balance(user_id)
    credit = get_user_credit(user_id)

    if total_available < product['price']:
        bot.send_message(user_id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏!")
        show_purchases(message)
        return

    processing_msg = bot.send_message(user_id, "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂...")

    amount_from_balance = min(balance, product['price'])
    amount_from_credit = product['price'] - amount_from_balance

    success = True
    description_parts = []

    if amount_from_balance > 0:
        success_balance = update_user_balance(
            user_id,
            -amount_from_balance,
            f"–ü–æ–∫—É–ø–∫–∞: {product['name']} (—á–∞—Å—Ç—å –∏–∑ –±–∞–ª–ª–æ–≤)",
            product['name']
        )
        success = success and success_balance
        description_parts.append(f"{amount_from_balance} –∏–∑ –±–∞–ª–ª–æ–≤")

    if amount_from_credit > 0:
        success_credit = update_credit_in_google(user_id, -amount_from_credit, product['name'])
        success = success and success_credit
        description_parts.append(f"{amount_from_credit} –∏–∑ –∫—Ä–µ–¥–∏—Ç–∞")

    bot.delete_message(user_id, processing_msg.message_id)

    if success:
        new_balance = get_user_balance(user_id)
        new_credit = get_user_credit(user_id)

        payment_description = " –∏ ".join(description_parts)

        bot.send_message(user_id,
                         f"‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                         f"üéÅ –¢–æ–≤–∞—Ä: {product['name']}\n"
                         f"üí∞ –°–ø–∏—Å–∞–Ω–æ: {product['price']} –±–∞–ª–ª–æ–≤\n"
                         f"üí∏ –°–ø–∏—Å–∞–Ω–∏–µ: {payment_description}\n"
                         f"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} –±–∞–ª–ª–æ–≤\n"
                         f"üè¶ –û—Å—Ç–∞—Ç–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞: {new_credit} –±–∞–ª–ª–æ–≤\n"
                         f"üì¶ –¢–æ–≤–∞—Ä –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è")

        send_purchase_notification_with_credit(
            user_id, product, message.from_user,
            amount_from_balance, amount_from_credit,
            new_balance, new_credit
        )
    else:
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –±–∞–ª–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    show_purchases(message)


def update_credit_in_google(user_id, amount, product_name):
    try:
        print(f"üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞: {user_id} {amount:+} –∑–∞ {product_name}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞: {e}")
        return False


def send_purchase_notification_with_credit(user_id, product, user, amount_from_balance, amount_from_credit, new_balance,
                                           new_credit):
    try:
        payment_parts = []
        if amount_from_balance > 0:
            payment_parts.append(f"{amount_from_balance} –∏–∑ –±–∞–ª–ª–æ–≤")
        if amount_from_credit > 0:
            payment_parts.append(f"{amount_from_credit} –∏–∑ –∫—Ä–µ–¥–∏—Ç–∞")

        payment_description = " + ".join(payment_parts)

        message_text = f"""üõí –°–û–û–ë–©–ï–ù–ò–ï –û –ü–û–ö–£–ü–ö–ï

üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {user.first_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üÜî ID: {user_id}
üì± Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}

üéÅ –¢–æ–≤–∞—Ä: {product['name']}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {product['price']} –±–∞–ª–ª–æ–≤
üí∏ –°–ø–∏—Å–∞–Ω–∏–µ: {payment_description}

üìä –ù–æ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã:
‚Ä¢ –ë–∞–ª–∞–Ω—Å: {new_balance} –±–∞–ª–ª–æ–≤
‚Ä¢ –ö—Ä–µ–¥–∏—Ç: {new_credit} –±–∞–ª–ª–æ–≤
‚Ä¢ –í—Å–µ–≥–æ: {new_balance + new_credit} –±–∞–ª–ª–æ–≤

üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}

‚úÖ –ë–∞–ª–ª—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–ø–∏—Å–∞–Ω—ã
‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–¥–∞—Ç—å —Ç–æ–≤–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""

        bot.send_message(SUGGESTIONS_CHANNEL, message_text)
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–µ: {e}")
        return False


# ================== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==================
def show_password_prompt(message):
    user_id = str(message.from_user.id)
    user_states[user_id] = 'waiting_password'
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    bot.send_message(user_id, "üîê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ø–∏—Å–∫—É ID –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:", reply_markup=markup)


def handle_password(message):
    user_id = str(message.from_user.id)
    password_attempt = message.text

    if password_attempt == "üîô –ù–∞–∑–∞–¥":
        user_states[user_id] = None
        start(message)
        return

    if password_attempt == PASSWORD:
        user_states[user_id] = None
        show_available_ids(message)
    else:
        bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")


def show_available_ids(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ ID –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è)"""
    user_id = str(message.from_user.id)

    bot.send_message(user_id, "üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –∏–∑ —Ç–∞–±–ª–∏—Ü—ã...")

    users_data = load_google_sheets_data()

    if users_data:
        ids_text = "üìã –ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö ID –í –¢–ê–ë–õ–ò–¶–ï:\n\n"

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ ID
        sorted_users = sorted(users_data.items(), key=lambda x: int(x[0]) if x[0].isdigit() else 0)

        for i, (uid, data) in enumerate(sorted_users, 1):
            name = data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            total = data.get('total_score', 0)
            count_3_4 = data.get('count_3_4', 0)
            penalty_applied = data.get('penalty_applied', 0)

            ids_text += f"{i}. üÜî {uid} - {name}\n"
            ids_text += f"   üí∞ –í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤: {total}\n"
            ids_text += f"   ‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –î–î: {count_3_4}\n"
            if penalty_applied > 0:
                ids_text += f"   üö´ –®—Ç—Ä–∞—Ñ–æ–≤: {penalty_applied}\n"
            ids_text += "\n"

        ids_text += f"üîç –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_data)}\n"
        ids_text += f"üë§ –í–∞—à ID: {user_id}"

    else:
        ids_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"

    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
    if len(ids_text) > 4000:
        parts = []
        current_part = ""
        lines = ids_text.split('\n')

        for line in lines:
            if len(current_part + line + '\n') > 4000:
                parts.append(current_part)
                current_part = line + '\n'
            else:
                current_part += line + '\n'

        if current_part:
            parts.append(current_part)

        for part in parts:
            bot.send_message(user_id, part)
            time.sleep(0.5)
    else:
        bot.send_message(user_id, ids_text)

    start(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é


def show_reviews(message):
    user_id = str(message.from_user.id)
    markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton("‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", url="https://t.me/noofuck_feedback")
    markup.add(btn)
    bot.send_message(user_id, "‚≠ê –û—Ç–∑—ã–≤—ã\n\n–û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ:", reply_markup=markup)


def show_rules(message):
    rules_text = "üìã –ü—Ä–∞–≤–∏–ª–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤\n\n üöÄ  –ü—Ä–∞–≤–∏–ª–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ \n\n –ó–¥–µ—Å—å —Ç—ã —É–∑–Ω–∞–µ—à—å, –∫–∞–∫ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—á–∫–∏ –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏. –ê–∫—Ç–∏–≤–Ω–∏—á–∞–π, —É—á–∏—Å—å –∏ –ø–æ–ª—É—á–∞–π –∑–∞ —ç—Ç–æ –∑–∞—Å–ª—É–∂–µ–Ω–Ω—ã–µ –±–∞–ª–ª—ã!\n\n --- ‚ú® ---\n\n üìö –£—á–µ–±–∞ –∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞\n\n‚Üí –ü—Ä–∏—Å–ª–∞–ª(–∞) –î–ó –≤ –¥–µ–¥–ª–∞–π–Ω ‚Üí  + 10 –±–∞–ª–ª–æ–≤ \n\n ‚Üí –°–¥–∞–ª(–∞) –î–ó –ø–æ—Å–ª–µ –¥–µ–¥–ª–∞–π–Ω–∞ ‚Üí + 5 –±–∞–ª–ª–æ–≤ \n\n ‚Üí –ü—Ä–æ–±–Ω–∏–∫ —Å–¥–∞–Ω –≤ —Å—Ä–æ–∫ ‚Üí + 15 –±–∞–ª–ª–æ–≤ \n\n ‚Üí –ü—Ä–æ–±–Ω–∏–∫ —Å–¥–∞–Ω –ø–æ—Å–ª–µ –¥–µ–¥–ª–∞–π–Ω–∞ ‚Üí + 8 –±–∞–ª–ª–æ–≤ \n\n üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å \n\n ‚Üí –£—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã–ª(–∞) –∑–∞—á—ë—Ç ‚Üí + 20 –±–∞–ª–ª–æ–≤ \n\n ‚Üí –ü—Ä–∏—à—ë–ª(—à–ª–∞) –Ω–∞ —Å—Ö–æ–¥–∫—É ‚Üí + 15 –±–∞–ª–ª–æ–≤ \n\n ‚Üí –ü–æ–±–µ–¥–∏–ª(–∞) –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ ‚Üí + 15 –±–∞–ª–ª–æ–≤ \n\n ‚Üí –£—á–∞—Å—Ç–≤–æ–≤–∞–ª(–∞) –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ ‚Üí + 8 –±–∞–ª–ª–æ–≤ \n\n üíé –§–∏—Ä–º–µ–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Ç –ù–∏–∫–∏—Ç—ã \n\n ‚Üí –†–µ—à–∏–ª(–∞) –∞–≤—Ç–æ—Ä—Å–∫–∏–π –ø—Ä–æ–±–Ω–∏–∫ ‚Üí + 30 –±–∞–ª–ª–æ–≤ \n\n ‚Üí –ü–æ—Å–µ—Ç–∏–ª(–∞) –∏ –∞–∫—Ç–∏–≤–Ω–æ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª(–∞) –Ω–∞ –¥–æ–ø. –≤–µ–±–∏–Ω–∞—Ä–µ ‚Üí + 15 –±–∞–ª–ª–æ–≤ \n\n ü™Ö –§–∏—Ä–º–µ–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Ç –ì–µ–ª–∏ \n\n ‚Üí –†–µ—à–∏–ª(–∞) –∞–≤—Ç–æ—Ä—Å–∫–∏–π –ø—Ä–æ–±–Ω–∏–∫ ‚Üí + 30 –±–∞–ª–ª–æ–≤ \n\n ‚Üí –ü–æ—Å–µ—Ç–∏–ª(–∞) –∏ –∞–∫—Ç–∏–≤–Ω–æ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª(–∞) –Ω–∞ –¥–æ–ø. –≤–µ–±–∏–Ω–∞—Ä–µ ‚Üí + 15 –±–∞–ª–ª–æ–≤ \n\n ‚Üí –†–µ—à–∏–ª(–∞) –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–≤—ã—à–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –≤–µ—Ä–Ω–æ ‚Üí + 5 –±–∞–ª–ª–æ–≤ \n\n –†–µ—à–∏–ª(–∞) –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–≤—ã—à–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –Ω–µ–≤–µ—Ä–Ω–æ ‚Üí + 3 –±–∞–ª–ª–∞ \n\n üöÄ –ö—Ä—É–ø–Ω—ã–µ –ø–æ–±–µ–¥—ã \n\n ‚Üí –£—Å–ø–µ—à–Ω–æ —Å–¥–∞–ª(–∞) —Ä—É–±–µ–∂–Ω—É—é –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é ‚Üí  + 25 –±–∞–ª–ª–æ–≤ \n\n --- ‚ú® --- \n\n –£—á–∞—Å—Ç–≤—É–π, –¥–µ–π—Å—Ç–≤—É–π –∏ –ø–æ–∫–æ—Ä—è–π –Ω–æ–≤—ã–µ –≤—ã—Å–æ—Ç—ã! üí™"
    bot.send_message(message.from_user.id, rules_text)


def show_penalties(message):
    penalties_text = """‚ö° –®—Ç—Ä–∞—Ñ—ã

üî¥ –ù–ê–†–£–®–ï–ù–ò–Ø –ò –®–¢–†–ê–§–´ 

*–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞ —á—Ç–æ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è —à—Ç—Ä–∞—Ñ–Ω—ã–µ —Å–∞–Ω–∫—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ üöÄ –Ω–æ–æFuck'–∞*

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìã –ö–ê–¢–ï–ì–û–†–ò–ò –®–¢–†–ê–§–û–í:

‚ùå –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –î–î:
   ‚Ä¢ –ü–µ—Ä–≤—ã–µ 2 –ø—Ä–æ—Å—Ä–æ—á–∫–∏ ‚Üí 0 –±–∞–ª–ª–æ–≤
   ‚Ä¢ –ö–∞–∂–¥–∞—è –ø–æ—Å–ª–µ–¥—É—é—â–∞—è ‚Üí üî¥ -20 –±–∞–ª–ª–æ–≤

üö´ –°–µ—Ä—å–µ–∑–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è:
   ‚Ä¢ –ù–µ—Å–¥–∞–Ω–Ω—ã–π –∑–∞—á–µ—Ç ‚Üí üî¥ -20 –±–∞–ª–ª–æ–≤
   ‚Ä¢ –ù–µ—Å–¥–∞–Ω–Ω—ã–π –∞–≤—Ç–æ—Ä—Å–∫–∏–π –ø—Ä–æ–±–Ω–∏–∫ ‚Üí üî¥ -30 –±–∞–ª–ª–æ–≤
   ‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω –¥–µ–¥–ª–∞–π–Ω –æ—Ç –∫—É—Ä–∞—Ç–æ—Ä–∞ ‚Üí üî¥ -15 –±–∞–ª–ª–æ–≤
   ‚Ä¢ –ü–µ—Ä–µ–Ω–æ—Å –¥–µ–¥–ª–∞–π–Ω–∞ –î–ó –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ‚Üí üî¥ -10 –±–∞–ª–ª–æ–≤
   ‚Ä¢ –ü–µ—Ä–µ–Ω–æ—Å –¥–µ–¥–ª–∞–π–Ω–∞ –ø—Ä–æ–±–Ω–∏–∫–∞ –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ‚Üí üî¥ -15 –±–∞–ª–ª–æ–≤
   ‚Ä¢ –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –≤ –õ–° –∑–∞ 24 —á–∞—Å–∞ ‚Üí üî¥ -20 –±–∞–ª–ª–æ–≤
   ‚Ä¢ –ü–µ—Ä–µ–Ω–æ—Å –î–ó –±–æ–ª–µ–µ –¥–≤—É—Ö —Ä–∞–∑ ‚Üí üî¥ -20 –±–∞–ª–ª–æ–≤
   ‚Ä¢ –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–¥–æ–≤–∞—è —Ñ—Ä–∞–∑–∞ ‚Üí üî¥ -10 –±–∞–ª–ª–æ–≤
   ‚Ä¢ –ù–µ —Å–¥–∞–Ω–∞ —Ä—É–±–µ–∂–Ω–∞—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è ‚Üí üî¥ -25 –±–∞–ª–ª–æ–≤

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üí° –ü–û–õ–ï–ó–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:

‚úÖ –ö–∞–∫ –∏–∑–±–µ–∂–∞—Ç—å —à—Ç—Ä–∞—Ñ–æ–≤?
   ‚Ä¢ –°–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –î–ó
   ‚Ä¢ –°–ª–µ–¥–∏—Ç—å –∑–∞ —Å—Ä–æ–∫–∞–º–∏
   ‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç—è—Ö

üìä –ì–¥–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é?
   ‚Ä¢ –†–∞–∑–¥–µ–ª "–ò—Å—Ç–æ—Ä–∏—è –∑–∞—á–∏—Å–ª–µ–Ω–∏–π"
   ‚Ä¢ –í –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ "–ü—Ä–æ—Ñ–∏–ª—å"""
    bot.send_message(message.from_user.id, penalties_text)


def show_purchases_old(message):
    purchases_text = "üõí –ü–æ–∫—É–ø–∫–∏ –∑–∞ –±–∞–ª–ª—ã\n\nüéÅ –ë–æ–Ω—É—Å—ã..."
    bot.send_message(message.from_user.id, purchases_text)


# –î–∞–Ω–Ω—ã–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω
QUIZZES = {
    "quiz1": {
        "name": "üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ ‚Ññ1: –û–±—â–∞—è —Ö–∏–º–∏—è",
        "description": "–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π –ø–æ –æ–±—â–µ–π —Ö–∏–º–∏–∏",
        "questions": [
            {
                "question": "–í–æ–ø—Ä–æ—Å ‚Ññ1: –ö–∞–∫–æ–π –∏–∑ –∏–∑–æ—Ç–æ–ø–æ–≤ –≤–æ–¥–æ—Ä–æ–¥–∞ —Å–∞–º—ã–π —Ä–∞–¥–∏–æ–∞–∫—Ç–∏–≤–Ω—ã–π?",
                "options": [
                    "H1",
                    "–ø—Ä–æ—Ç–∏–π",
                    "–¥–µ–π—Ç–µ—Ä–∏–π",
                    "—Ç—Ä–∏—Ç–∏–π",
                    "–Ω–∏–æ–±–∏–π"
                ],
                "correct_answer": 3
            },
            {
                "question": "–í–æ–ø—Ä–æ—Å ‚Ññ2: –ö–∞–∫–æ–µ —è–≤–ª–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç –¥–≤–æ–π—Å—Ç–≤–µ–Ω–Ω—É—é –ø—Ä–∏—Ä–æ–¥—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–∞?",
                "options": [
                    "—ç–ª–µ–∫—Ç—Ä–æ–º–∞–≥–Ω–∏—Ç–Ω—ã–π –¥—É–∞–ª–∏–∑–º",
                    "–∫–æ—Ä–ø—É—Å–∫—É–ª—è—Ä–Ω–æ-–≤–æ–ª–Ω–æ–≤–æ–π –¥—É–∞–ª–∏–∑–º",
                    "–≤–æ–ª–Ω–æ–≤–æ–π –¥—É–∞–ª–∏–∑–º",
                    "–¥–≤–æ–π—Å—Ç–≤–µ–Ω–Ω—ã–π –¥—É–∞–ª–∏–∑–º",
                    "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ-–º–∞–≥–Ω–∏—Ç–Ω—ã–π –¥—É–∞–ª–∏–∑–º"
                ],
                "correct_answer": 1
            },
            {
                "question": "–í–æ–ø—Ä–æ—Å ‚Ññ3: –ò–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤ —Ä—è–¥—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–∫–∏–µ, –∫–æ—Ç–æ—Ä—ã–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª–µ–Ω—Ç–Ω—ã—Ö —ç–ª–µ–∫—Ç—Ä–æ–Ω–æ–≤.",
                "options": [
                    "S",
                    "Ba",
                    "Cr",
                    "Cl",
                    "B"
                ],
                "input_type": "text",
                "correct_answer": "34"
            },
            {
                "question": "–í–æ–ø—Ä–æ—Å ‚Ññ4: –ò–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤ —Ä—è–¥—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç–∞-–Ω–µ–º–µ—Ç–∞–ª–ª–∞. –†–∞—Å–ø–æ–ª–æ–∂–∏—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –ø–æ—Ä—è–¥–∫–µ —É–º–µ–Ω—å—à–µ–Ω–∏—è –¥–ª–∏–Ω—ã —Å–≤—è–∑–∏ –≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –≤–æ–¥–æ—Ä–æ–¥–æ–º.",
                "options": [
                    "S",
                    "Ba",
                    "Cr",
                    "Cl",
                    "B"
                ],
                "input_type": "text",
                "correct_answer": "415"
            },
            {
                "question": "–í–æ–ø—Ä–æ—Å ‚Ññ5: –ò–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤ —Ä—è–¥—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–≤–∞, —É –∫–æ—Ç–æ—Ä—ã—Ö –æ–¥–∏–Ω–∞–∫–æ–≤–∞ —Å—É–º–º–∞ –≤—ã—Å—à–µ–π –∏ –Ω–∏–∑—à–µ–π —Å—Ç–µ–ø–µ–Ω–µ–π –æ–∫–∏—Å–ª–µ–Ω–∏—è.",
                "options": [
                    "Al",
                    "Br",
                    "S",
                    "Ge",
                    "K"
                ],
                "input_type": "text",
                "correct_answer": "34"
            },
            {
                "question": "–í–æ–ø—Ä–æ—Å ‚Ññ6: –ò–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—á–Ω—è –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª–æ–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —Å–æ–±–ª—é–¥–∞—Ç—å—Å—è –ø—Ä–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –≤–æ–¥–æ—Ä–æ–¥–Ω—ã—Ö —Å–≤—è–∑–µ–π.",
                "options": [
                    "–Ω–∞–ª–∏—á–∏–µ –∞—Ç–æ–º–∞ –≤–æ–¥–æ—Ä–æ–¥–∞",
                    "—Å–≤—è–∑—å –º–µ–∂–¥—É –∞—Ç–æ–º–æ–º –≤–æ–¥–æ—Ä–æ–¥–∞ –∏ —Å–∏–ª—å–Ω–æ –≠–û –∞—Ç–æ–º–∞ –≤–Ω—É—Ç—Ä–∏ –º–æ–ª–µ–∫—É–ª—ã",
                    "–º–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è –∫—Ä–∏—Å—Ç–∞–ª–ª–∏—á–µ—Å–∫–∞—è —Ä–µ—à–µ—Ç–∫–∞",
                    "—Å–≤—è–∑–∏, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –î–ê-–º–µ—Ö–∞–Ω–∏–∑–º—É",
                    "–∏–æ–Ω–Ω–æ–µ —Å—Ç—Ä–æ–µ–Ω–∏–µ"
                ],
                "input_type": "text",
                "correct_answer": "13"
            },
            {
                "question": "–í–æ–ø—Ä–æ—Å ‚Ññ7: –ì–¥–µ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ª—é–±–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞?",
                "options": [
                    "–≤ —à–∫–∞–ª–µ –ü–æ–ª–∏–Ω–≥–∞",
                    "–≤ —Å–∏—Å—Ç–µ–º–µ –§–∞—Ä–∞–¥–µ—è",
                    "–≤ —Ç–∞–±–ª–∏—Ü–µ –ú–µ–Ω–¥–µ–ª–µ–µ–≤–∞",
                    "–≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ –ë–ª—ç–∫—É",
                    "–≤ —à–∫–∞–ª–µ –ú–∞–ª–ª–∏–∫–µ–Ω–∞"
                ],
                "correct_answer": 0
            },
            {
                "question": "–í–æ–ø—Ä–æ—Å ‚Ññ8: –ò–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—á–Ω—è –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É—é—Ç –≤–µ—â–µ—Å—Ç–≤–∞ —Å –∞—Ç–æ–º–Ω–æ–π –∫—Ä–∏—Å—Ç–∞–ª–ª–∏—á–µ—Å–∫–æ–π —Ä–µ—à–µ—Ç–∫–æ–π.",
                "options": [
                    "—Ö—Ä—É–ø–∫–∏–µ",
                    "–ø–æ—á—Ç–∏ —Ä–∞—Å—Ç–≤–æ—Ä–∏–º—ã –≤ –≤–æ–¥–µ",
                    "–Ω–µ –ø—Ä–æ–≤–æ–¥—è—Ç —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π —Ç–æ–∫",
                    "–≤—ã—Å–æ–∫–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∫–∏–ø–µ–Ω–∏—è",
                    "–ª–µ—Ç—É—á–∏–µ"
                ],
                "input_type": "text",
                "correct_answer": "134"
            },
            {
                "question": "–í–æ–ø—Ä–æ—Å ‚Ññ9: –í –∫–∞–∫–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è—Ö —É –∫–∏—Å–ª–æ—Ä–æ–¥–∞ —Å—Ç–µ–ø–µ–Ω—å –æ–∫–∏—Å–ª–µ–Ω–∏—è -1/3?",
                "options": [
                    "–ø–µ—Ä–æ–∫—Å–∏–¥—ã",
                    "—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫–∏—Å–ª–æ—Ä–æ–¥–∞ —Å–æ —Ñ—Ç–æ—Ä–æ–º",
                    "–æ–∑–æ–Ω–∏–¥—ã",
                    "–Ω–∞–¥–ø–µ—Ä–æ–∫—Å–∏–¥—ã",
                    "—Å—É–ø–µ—Ä–æ–∫—Å–∏–¥—ã"
                ],
                "input_type": "text",
                "correct_answer": "3"
            },
            {
                "question": "–í–æ–ø—Ä–æ—Å ‚Ññ10: –ö–∞–∫–∏–µ –∏–∑ —ç—Ç–∏—Ö —Å—Ç–µ–ø–µ–Ω–µ–π –æ–∫–∏—Å–ª–µ–Ω–∏—è —Ö–ª–æ—Ä –Ω–µ –ø—Ä–æ—è–≤–ª—è–µ—Ç?",
                "options": [
                    "-2",
                    "+4",
                    "+5",
                    "+7",
                    "+2"
                ],
                "input_type": "text",
                "correct_answer": "15"
            },
            {
                "question": "–í–æ–ø—Ä–æ—Å ‚Ññ11: –ü—Ä–∏ —Å–º–µ—à–∏–≤–∞–Ω–∏–∏ –¥–≤—É—Ö —Ä–∞—Å—Ç–≤–æ—Ä–æ–≤ –æ–¥–Ω–æ–π —Ç–æ–π –∂–µ —Å–æ–ª–∏ —Å –º–∞—Å—Å–æ–≤—ã–º–∏ –¥–æ–ª—è–º–∏ 18% –∏ 12% –±—ã–ª –ø–æ–ª—É—á–µ–Ω —Ä–∞—Å—Ç–≤–æ—Ä –º–∞—Å—Å–æ–π 180 –≥ —Å –º–∞—Å—Å–æ–≤–æ–π –¥–æ–ª–µ–π 16%. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –º–∞—Å—Å—É —Å–æ–ª–∏, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–¥–µ—Ä–∂–∞–ª–∞—Å—å –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ä–∞—Å—Ç–≤–æ—Ä–µ —Å –º–µ–Ω—å—à–µ–π –º–∞—Å—Å–æ–≤–æ–π –¥–æ–ª–µ–π. –û—Ç–≤–µ—Ç —É–∫–∞–∂–∏—Ç–µ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –¥–µ—Å—è—Ç—ã—Ö.",
                "input_type": "text",
                "correct_answer": "7,2"
            },
            {
                "question": "–í–æ–ø—Ä–æ—Å ‚Ññ12: –ò–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—á–Ω—è –≤—ã–±–µ—Ä–∏—Ç–µ –∞–ª–ª–æ—Ç—Ä–æ–ø–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É–≥–ª–µ—Ä–æ–¥–∞.",
                "options": [
                    "–∫–æ—Ä—É–Ω–¥",
                    "–≥—Ä–∞—Ñ–∏—Ç",
                    "—Ñ—É–ª–ª–µ—Ä–µ–Ω",
                    "–∞–ª–º–∞–∑",
                    "–ø–µ–º–∑–∞"
                ],
                "input_type": "text",
                "correct_answer": "234"
            },
            {
                "question": "–í–æ–ø—Ä–æ—Å ‚Ññ13: –ò–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—á–Ω—è –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∏—Å–ª—ã–µ —Å–æ–ª–∏.",
                "options": [
                    "CsH‚ÇÇPO‚ÇÇ",
                    "Rb‚ÇÇHPO‚ÇÉ",
                    "NaH‚ÇÇPO‚ÇÉ",
                    "NaH‚ÇÇPO‚ÇÑ",
                    "NH‚ÇÑHSO‚ÇÉ"
                ],
                "input_type": "text",
                "correct_answer": "345"
            },
            {
                "question": "–í–æ–ø—Ä–æ—Å ‚Ññ14: –ò–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—á–Ω—è –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∏—Å–ª–æ—Ç—ã —Å—Ä–µ–¥–Ω–µ–π —Å–∏–ª—ã.",
                "options": [
                    "–æ—Ä—Ç–æ—Ñ–æ—Å—Ñ–æ—Ä–Ω–∞—è –∫–∏—Å–ª–æ—Ç–∞",
                    "–ø–ª–∞–≤–∏–∫–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞",
                    "—É–∫—Å—É—Å–Ω–∞—è –∫–∏—Å–ª–æ—Ç–∞",
                    "—Å–µ—Ä–Ω–∏—Å—Ç–∞—è –∫–∏—Å–ª–æ—Ç–∞",
                    "—É–≥–æ–ª—å–Ω–∞—è –∫–∏—Å–ª–æ—Ç–∞"
                ],
                "input_type": "text",
                "correct_answer": "1234"
            },
            {
                "question": "–í–æ–ø—Ä–æ—Å ‚Ññ15: –ò–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—á–Ω—è –≤—ã–±–µ—Ä–∏—Ç–µ –æ–±—Ä–∞—Ç–∏–º—ã–µ —Ä–µ–∞–∫—Ü–∏–∏.",
                "options": [
                    "—Å–∏–Ω—Ç–µ–∑ —Ö–ª–æ—Ä–æ–≤–æ–¥–æ—Ä–æ–¥–∞",
                    "–¥–µ–≥–∏–¥—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ",
                    "—ç—Ç–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è",
                    "–≥–∏–¥—Ä–∞—Ç–∞—Ü–∏—è",
                    "–∫–∏—Å–ª–æ—Ç–Ω—ã–π –≥–∏–¥—Ä–æ–ª–∏–∑ –∫–∞—Ä–±–∏–¥–æ–≤"
                ],
                "input_type": "text",
                "correct_answer": "234"
            }
        ]
    }
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω
user_quiz_progress = {}


def show_quizzes_menu(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤–∏–∫—Ç–æ—Ä–∏–Ω"""
    user_id = str(message.from_user.id)

    quizzes_text = """üéØ –í–ò–ö–¢–û–†–ò–ù–´

–°–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω, –ø—Ä–∏ —É—á–∞—Å—Ç–∏–∏ –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã –º–æ–∂–µ—à—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã!

üìä –ó–∞ –∫–∞–∂–¥—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å:
‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: +1 –±–∞–ª–ª
‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 0 –±–∞–ª–ª–æ–≤

–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É:"""

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    for quiz_id, quiz_data in QUIZZES.items():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç—É –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
        if user_id in user_completed_quizzes and quiz_id in user_completed_quizzes[user_id]:
            markup.add(types.KeyboardButton(f"‚úÖ {quiz_data['name']} (–ü—Ä–æ–π–¥–µ–Ω–∞)"))
        else:
            markup.add(types.KeyboardButton(quiz_data["name"]))

    markup.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))

    bot.send_message(user_id, quizzes_text, reply_markup=markup)


def start_quiz(message, quiz_id):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—É"""
    user_id = str(message.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞
    if quiz_id not in QUIZZES:
        bot.send_message(user_id, "‚ùå –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ–∫–∞ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        show_quizzes_menu(message)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç—É –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
    if user_id in user_completed_quizzes and quiz_id in user_completed_quizzes[user_id]:
        bot.send_message(user_id, "‚úÖ –¢—ã —É–∂–µ –ø—Ä–æ—à–µ–ª —ç—Ç—É –≤–∏–∫—Ç–æ—Ä–∏–Ω—É, –∂–¥–∏ –æ—Å—Ç–∞–ª—å–Ω—ã–µ!")
        show_quizzes_menu(message)
        return

    quiz = QUIZZES[quiz_id]

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_quiz_progress[user_id] = {
        'quiz_id': quiz_id,
        'current_question': 0,
        'score': 0,
        'answers': [],
        'start_time': datetime.now()
    }

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    intro_text = f"""üéØ {quiz['name']}

{quiz['description']}

üìù –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(quiz['questions'])}
‚è±Ô∏è –í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: ~{len(quiz['questions']) * 2} –º–∏–Ω—É—Ç

üí° –û—Ç–≤–µ—á–∞–π—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ! –£–¥–∞—á–∏!"""

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É"))
    markup.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞–º"))

    bot.send_message(user_id, intro_text, reply_markup=markup)


def send_question(user_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    progress = user_quiz_progress.get(user_id)
    if not progress:
        return

    quiz_id = progress['quiz_id']
    quiz = QUIZZES[quiz_id]
    question_index = progress['current_question']

    if question_index >= len(quiz['questions']):
        finish_quiz(user_id)
        return

    question_data = quiz['questions'][question_index]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞ –ø–æ –Ω–∞–ª–∏—á–∏—é input_type
    if 'input_type' in question_data and question_data['input_type'] == 'text':
        question_type = 'text'
    else:
        question_type = 'choice'

    question_text = f"""‚ùì –í–æ–ø—Ä–æ—Å {question_index + 1}/{len(quiz['questions'])}

{question_data['question']}"""

    if question_type == 'choice':
        # –í–æ–ø—Ä–æ—Å —Å –≤—ã–±–æ—Ä–æ–º –æ—Ç–≤–µ—Ç–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
        question_text += "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:"
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

        for i, option in enumerate(question_data['options']):
            button_text = f"{i + 1}. {option}"
            markup.add(types.KeyboardButton(button_text))

        bot.send_message(user_id, question_text, reply_markup=markup)

    else:
        # –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å - –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –æ—Ç–≤–µ—Ç
        if 'options' in question_data:
            question_text += "\n\n–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞:"
            options_text = "\n".join([f"{i + 1}. {option}" for i, option in enumerate(question_data['options'])])
            question_text += f"\n{options_text}"
            question_text += "\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123 –∏–ª–∏ 45):"
        else:
            question_text += "\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:"

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

        bot.send_message(user_id, question_text, reply_markup=markup)


def handle_quiz_answer(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    user_id = str(message.from_user.id)
    progress = user_quiz_progress.get(user_id)

    if not progress:
        bot.send_message(user_id, "‚ùå –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        show_quizzes_menu(message)
        return

    quiz_id = progress['quiz_id']
    quiz = QUIZZES[quiz_id]
    question_index = progress['current_question']
    question_data = quiz['questions'][question_index]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞ –ø–æ –Ω–∞–ª–∏—á–∏—é input_type
    if 'input_type' in question_data and question_data['input_type'] == 'text':
        question_type = 'text'
    else:
        question_type = 'choice'

    if question_type == 'choice':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –≤—ã–±–æ—Ä–æ–º –æ—Ç–≤–µ—Ç–∞
        try:
            answer_text = message.text
            if answer_text and answer_text[0].isdigit():
                user_answer = int(answer_text[0]) - 1  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∏–Ω–¥–µ–∫—Å (0-based)
            else:
                # –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É –≤–∞—Ä–∏–∞–Ω—Ç–∞
                for i, option in enumerate(question_data['options']):
                    clean_option = option[3:] if len(option) > 3 and option[1] == ')' else option
                    if answer_text.lower() in clean_option.lower():
                        user_answer = i
                        break
                else:
                    bot.send_message(user_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö")
                    return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–∞
            if user_answer < 0 or user_answer >= len(question_data['options']):
                bot.send_message(user_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö")
                return

            # –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –≤—ã–±–æ—Ä–æ–º correct_answer –≤—Å–µ–≥–¥–∞ —á–∏—Å–ª–æ (–∏–Ω–¥–µ–∫—Å)
            correct_answer = question_data['correct_answer']
            is_correct = (user_answer == correct_answer)
            score_change = 1 if is_correct else 0

        except (ValueError, IndexError, KeyError) as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            bot.send_message(user_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö")
            return

    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        user_answer = message.text.strip()
        correct_answer = str(question_data['correct_answer'])

        # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏
        is_correct = (user_answer == correct_answer)
        score_change = 1 if is_correct else 0

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    progress['answers'].append({
        'question': question_data['question'],
        'user_answer': user_answer,
        'correct_answer': question_data['correct_answer'],
        'is_correct': is_correct,
        'options': question_data.get('options', []),
        'type': question_type
    })

    progress['score'] += score_change
    progress['current_question'] += 1

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–≤–µ—Ç–∞
    if is_correct:
        result_text = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! +1 –±–∞–ª–ª"
    else:
        if question_type == 'choice':
            # –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –≤—ã–±–æ—Ä–æ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
            correct_index = question_data['correct_answer']
            if 0 <= correct_index < len(question_data['options']):
                correct_option = question_data['options'][correct_index]
                result_text = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_option}"
            else:
                result_text = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_index}"
        else:
            # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
            result_text = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question_data['correct_answer']}"

    bot.send_message(user_id, result_text)

    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º
    time.sleep(1)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
    send_question(user_id)


def finish_quiz(user_id):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
    progress = user_quiz_progress.get(user_id)
    if not progress:
        return

    quiz_id = progress['quiz_id']
    quiz = QUIZZES[quiz_id]
    total_questions = len(quiz['questions'])
    score = progress['score']

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ
    if user_id not in user_completed_quizzes:
        user_completed_quizzes[user_id] = {}
    user_completed_quizzes[user_id][quiz_id] = {
        'score': score,
        'total_questions': total_questions,
        'completion_time': datetime.now(),
        'answers': progress['answers']
    }

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    percentage = (score / total_questions) * 100

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    result_text = f"""üéâ –í–ò–ö–¢–û–†–ò–ù–ê –ó–ê–í–ï–†–®–ï–ù–ê!

üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:
‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score}/{total_questions}
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {percentage:.1f}%
‚Ä¢ –ù–∞–±—Ä–∞–Ω–æ –±–∞–ª–ª–æ–≤: {score}

"""

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if percentage >= 90:
        result_text += "üèÜ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –í—ã –Ω–∞—Å—Ç–æ—è—â–∏–π —ç–∫—Å–ø–µ—Ä—Ç!"
    elif percentage >= 70:
        result_text += "üëç –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
    elif percentage >= 50:
        result_text += "üëå –ù–µ–ø–ª–æ—Ö–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ï—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏!"
    else:
        result_text += "üí™ –ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ—Å–ª–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏!"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    bot.send_message(user_id, result_text)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
    send_quiz_results_to_channel(user_id, progress)

    # –û—á–∏—â–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    del user_quiz_progress[user_id]

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é –≤–∏–∫—Ç–æ—Ä–∏–Ω (–£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
    time.sleep(3)
    # –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ–∂–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
    show_quizzes_simple(user_id)


def show_quizzes_simple(user_id):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –≤–∏–∫—Ç–æ—Ä–∏–Ω (–±–µ–∑ –æ–±—ä–µ–∫—Ç–∞ message)"""
    quizzes_text = """üéØ –í–ò–ö–¢–û–†–ò–ù–´

–°–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω, –ø—Ä–∏ —É—á–∞—Å—Ç–∏–∏ –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã –º–æ–∂–µ—à—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã!

üìä –ó–∞ –∫–∞–∂–¥—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å:
‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: +1 –±–∞–ª–ª
‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 0 –±–∞–ª–ª–æ–≤

–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É:"""

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    for quiz_id, quiz_data in QUIZZES.items():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç—É –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
        if user_id in user_completed_quizzes and quiz_id in user_completed_quizzes[user_id]:
            markup.add(types.KeyboardButton(f"‚úÖ {quiz_data['name']} (–ü—Ä–æ–π–¥–µ–Ω–∞)"))
        else:
            markup.add(types.KeyboardButton(quiz_data["name"]))

    markup.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))

    bot.send_message(user_id, quizzes_text, reply_markup=markup)


def cancel_quiz(user_id):
    """–û—Ç–º–µ–Ω—è–µ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—É"""
    if user_id in user_quiz_progress:
        del user_quiz_progress[user_id]
    bot.send_message(user_id, "‚ùå –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")


def send_quiz_results_to_channel(user_id, progress):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –≤ –∫–∞–Ω–∞–ª"""
    try:
        user = bot.get_chat(user_id)
        quiz_id = progress['quiz_id']
        quiz = QUIZZES[quiz_id]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–æ–≤
        answers_details = ""
        for i, answer in enumerate(progress['answers']):
            status = "‚úÖ" if answer['is_correct'] else "‚ùå"

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞
            question_type = answer.get('type', 'choice')

            if question_type == 'choice':
                # –í–æ–ø—Ä–æ—Å —Å –≤—ã–±–æ—Ä–æ–º –æ—Ç–≤–µ—Ç–∞
                try:
                    user_answer_text = answer['options'][answer['user_answer']]
                    correct_answer_text = answer['options'][answer['correct_answer']]
                except (IndexError, KeyError, TypeError):
                    # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
                    user_answer_text = str(answer.get('user_answer', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'))
                    correct_answer_text = str(answer.get('correct_answer', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))

                answers_details += f"\n{i + 1}. {answer['question']}\n"
                answers_details += f"   –û—Ç–≤–µ—Ç: {user_answer_text} {status}\n"
                if not answer['is_correct']:
                    answers_details += f"   –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {correct_answer_text}\n"
            else:
                # –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
                user_answer_text = str(answer.get('user_answer', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'))
                correct_answer_text = str(answer.get('correct_answer', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))

                answers_details += f"\n{i + 1}. {answer['question']}\n"
                answers_details += f"   –û—Ç–≤–µ—Ç: {user_answer_text} {status}\n"
                if not answer['is_correct']:
                    answers_details += f"   –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {correct_answer_text}\n"  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å

            answers_details += "   " + "-" * 30 + "\n"

        message_text = f"""üéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –í–ò–ö–¢–û–†–ò–ù–´

üë§ –£—á–∞—Å—Ç–Ω–∏–∫: {user.first_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üÜî ID: {user_id}
üì± Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}

üìù –í–∏–∫—Ç–æ—Ä–∏–Ω–∞: {quiz['name']}
üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {progress['score']}/{len(quiz['questions'])} –±–∞–ª–ª–æ–≤
‚è±Ô∏è –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {progress['start_time'].strftime('%d.%m.%Y %H:%M')}
‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {str(datetime.now() - progress['start_time']).split('.')[0]}

üìã –û—Ç–≤–µ—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–∞:
{answers_details}

üìà –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {(progress['score'] / len(quiz['questions'])) * 100:.1f}%"""

        bot.send_message(SUGGESTIONS_CHANNEL, message_text)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ
        save_completed_quizzes()

        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {e}")
        import traceback
        print(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
        return False


def handle_quiz_selection(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    user_id = str(message.from_user.id)

    if message.text == "üîô –ù–∞–∑–∞–¥":
        user_states[user_id] = None
        start(message)
        return

    if message.text == "üîô –ù–∞–∑–∞–¥ –∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞–º":
        show_quizzes_menu(message)
        return

    if message.text == "üöÄ –ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É":
        progress = user_quiz_progress.get(user_id)
        if progress:
            send_question(user_id)
        return

    # –ò—â–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
    for quiz_id, quiz_data in QUIZZES.items():
        if message.text == quiz_data["name"] or message.text == f"‚úÖ {quiz_data['name']} (–ü—Ä–æ–π–¥–µ–Ω–∞)":
            start_quiz(message, quiz_id)
            return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞
    if "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞" in message.text:
        bot.send_message(user_id, "‚ùå –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ–∫–∞ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        show_quizzes_menu(message)
        return

    # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    if user_id in user_quiz_progress:
        handle_quiz_answer(message)
        return

    show_quizzes_menu(message)


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω
user_completed_quizzes = {}
# ================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==================
if __name__ == '__main__':
    print("=" * 50)
    print("üöÄ –ë–û–¢ –ó–ê–ü–£–©–ï–ù –ù–ê AMVERA")
    print("=" * 50)

    test_data = load_google_sheets_data()
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(test_data)}")

    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    bot.remove_webhook()

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ long-polling...")

    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª —Å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    while True:
        try:
            print("üîÑ –ó–∞–ø—É—Å–∫ polling...")
            bot.infinity_polling(timeout=60, long_polling_timeout=60)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ polling: {e}")
            print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)